"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6652],{37113:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>c});var a=n(85893),i=n(11151);const o={sidebar_label:"teachability_mongodb",title:"agentchat.contrib.capabilities.teachability_mongodb"},s=void 0,r={id:"reference/agentchat/contrib/capabilities/teachability_mongodb",title:"agentchat.contrib.capabilities.teachability_mongodb",description:"Teachability\\_MongoDBvCore",source:"@site/docs/reference/agentchat/contrib/capabilities/teachability_mongodb.md",sourceDirName:"reference/agentchat/contrib/capabilities",slug:"/reference/agentchat/contrib/capabilities/teachability_mongodb",permalink:"/autogen/docs/reference/agentchat/contrib/capabilities/teachability_mongodb",draft:!1,unlisted:!1,editUrl:"https://github.com/microsoft/autogen/edit/main/website/docs/reference/agentchat/contrib/capabilities/teachability_mongodb.md",tags:[],version:"current",frontMatter:{sidebar_label:"teachability_mongodb",title:"agentchat.contrib.capabilities.teachability_mongodb"},sidebar:"referenceSideBar",previous:{title:"teachability",permalink:"/autogen/docs/reference/agentchat/contrib/capabilities/teachability"},next:{title:"text_compressors",permalink:"/autogen/docs/reference/agentchat/contrib/capabilities/text_compressors"}},l={},c=[{value:"Teachability_MongoDBvCore",id:"teachability_mongodbvcore",level:2},{value:"__init__",id:"__init__",level:3},{value:"add_to_agent",id:"add_to_agent",level:3},{value:"prepopulate_db",id:"prepopulate_db",level:3},{value:"process_last_received_message",id:"process_last_received_message",level:3},{value:"MongoDBvCoreMemoStore",id:"mongodbvcorememostore",level:2},{value:"__init__",id:"__init__-1",level:3},{value:"reset_db",id:"reset_db",level:3},{value:"add_input_output_pair",id:"add_input_output_pair",level:3},{value:"get_nearest_memo",id:"get_nearest_memo",level:3},{value:"get_related_memos",id:"get_related_memos",level:3},{value:"prepopulate",id:"prepopulate",level:3}];function d(e){const t={code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h2,{id:"teachability_mongodbvcore",children:"Teachability_MongoDBvCore"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"class Teachability_MongoDBvCore(AgentCapability)\n"})}),"\n",(0,a.jsx)(t.p,{children:"Teachability uses a vector database to give an agent the ability to remember user teachings,\nwhere the user is any caller (human or not) sending messages to the teachable agent.\nTeachability is designed to be composable with other agent capabilities.\nTo make any conversable agent teachable, instantiate both the agent and the Teachability class,\nthen pass the agent to teachability.add_to_agent(agent).\nNote that teachable agents in a group chat must be given unique path_to_db_dir values.\n?Each agent gets its own database?"}),"\n",(0,a.jsx)(t.p,{children:"When adding Teachability to an agent, the following are modified:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"The agent's system message is appended with a note about the agent's new ability. Ok"}),"\n",(0,a.jsxs)(t.li,{children:["A hook is added to the agent's ",(0,a.jsx)(t.code,{children:"process_last_received_message"})," hookable method, Ok\nand the hook potentially modifies the last of the received messages to include earlier teachings related to the message.\nAdded teachings do not propagate into the stored message history. Ok\nIf new user teachings are detected, they are added to new memos in the vector database. Ok."]}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:"This class uses a MongoDB vCore database to store memos. When you instantiage this class,\nyou must provide a connection string to the MongoDB vCore database.\nAlso, this class will create a collection called 'memo_pairs' in the 'memos' database by default.\nIt will also create a vector search index named 'memo_pairs_vector_index' in the 'memo_pairs' collection,\nthis is necessary for the vector search to work."}),"\n",(0,a.jsx)(t.p,{children:"You can change this behavior when initializing the class by providing the desired database name and collection name.\nYou can even have a different database or collection for each agent (recommended)."}),"\n",(0,a.jsx)(t.h3,{id:"__init__",children:"__init__"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'def __init__(\n        verbosity: Optional[int] = 0,\n        reset_db: Optional[bool] = False,\n        connection_string: str = "your Mongodb vCore connection string here",\n        mongodb_database_name: Optional[str] = "memos",\n        mongodb_collection_name: Optional[str] = "memo_pairs",\n        recall_threshold: Optional[float] = 1.5,\n        max_num_retrievals: Optional[int] = 10,\n        llm_config: Optional[Union[Dict, bool]] = None)\n'})}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.strong,{children:"Arguments"}),":"]}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"verbosity"})," ",(0,a.jsx)(t.em,{children:"Optional, int"})," - # 0 (default) for basic info, 1 to add memory operations, 2 for analyzer messages, 3 for memo lists."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"reset_db"})," ",(0,a.jsx)(t.em,{children:"Optional, bool"})," - True to clear the DB before starting. Default False."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"connection_string"})," ",(0,a.jsx)(t.em,{children:"str"})," - The connection string to the MongoDB vCore database."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"recall_threshold"})," ",(0,a.jsx)(t.em,{children:"Optional, float"})," - The maximum distance for retrieved memos, where 0.0 is exact match. Default 1.5. Larger values allow more (but less relevant) memos to be recalled."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"max_num_retrievals"})," ",(0,a.jsx)(t.em,{children:"Optional, int"})," - The maximum number of memos to retrieve from the DB. Default 10."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"llm_config"})," ",(0,a.jsx)(t.em,{children:"dict or False"})," - llm inference configuration passed to TextAnalyzerAgent.\nIf None, TextAnalyzerAgent uses llm_config from the teachable agent."]}),"\n"]}),"\n",(0,a.jsx)(t.h3,{id:"add_to_agent",children:"add_to_agent"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"def add_to_agent(agent: ConversableAgent)\n"})}),"\n",(0,a.jsx)(t.p,{children:"Adds teachability to the given agent."}),"\n",(0,a.jsx)(t.h3,{id:"prepopulate_db",children:"prepopulate_db"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"def prepopulate_db()\n"})}),"\n",(0,a.jsx)(t.p,{children:"Adds a few arbitrary memos to the DB."}),"\n",(0,a.jsx)(t.h3,{id:"process_last_received_message",children:"process_last_received_message"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"def process_last_received_message(text: Union[Dict, str])\n"})}),"\n",(0,a.jsx)(t.p,{children:"Appends any relevant memos to the message text, and stores any apparent teachings in new memos.\nUses TextAnalyzerAgent to make decisions about memo storage and retrieval."}),"\n",(0,a.jsx)(t.h2,{id:"mongodbvcorememostore",children:"MongoDBvCoreMemoStore"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"class MongoDBvCoreMemoStore()\n"})}),"\n",(0,a.jsx)(t.p,{children:"Provides memory storage and retrieval for a teachable agent, using an Azure CosmosDB for MongoDB vCore vector database.\nEach DB entry (called a memo) is a pair of strings: an input text and an output text.\nThe input text might be a question, or a task to perform.\nThe output text might be an answer to the question, or advice on how to perform the task."}),"\n",(0,a.jsx)(t.h3,{id:"__init__-1",children:"__init__"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'def __init__(\n        verbosity: Optional[int] = 3,\n        reset: Optional[bool] = False,\n        connection_string: str = "your MongoDB vCore connection string here",\n        mongodb_database_name="memos",\n        mongodb_collection_name="memo_pairs")\n'})}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.strong,{children:"Arguments"}),":"]}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"verbosity (Optional, int): 1 to print memory operations, 0 to omit them. 3+ to print memo lists."}),"\n",(0,a.jsx)(t.li,{children:"reset (Optional, bool): True to clear the DB before starting. Default False."}),"\n",(0,a.jsx)(t.li,{children:"connection_string (str): The connection string to the MongoDB database."}),"\n"]}),"\n",(0,a.jsx)(t.h3,{id:"reset_db",children:"reset_db"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"def reset_db()\n"})}),"\n",(0,a.jsx)(t.p,{children:"Forces immediate deletion of the DB's contents, in memory and on disk."}),"\n",(0,a.jsx)(t.h3,{id:"add_input_output_pair",children:"add_input_output_pair"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"def add_input_output_pair(input_text: str, output_text: str)\n"})}),"\n",(0,a.jsx)(t.p,{children:"Adds an input-output pair to the vector DB."}),"\n",(0,a.jsx)(t.h3,{id:"get_nearest_memo",children:"get_nearest_memo"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"def get_nearest_memo(query_text: str)\n"})}),"\n",(0,a.jsx)(t.p,{children:"Retrieves the nearest memo to the given query text."}),"\n",(0,a.jsx)(t.h3,{id:"get_related_memos",children:"get_related_memos"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"def get_related_memos(query_text: str, n_results: int,\n                      threshold: Union[int, float])\n"})}),"\n",(0,a.jsx)(t.p,{children:"Retrieves memos that are related to the given query text within the specified distance threshold."}),"\n",(0,a.jsx)(t.h3,{id:"prepopulate",children:"prepopulate"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"def prepopulate()\n"})}),"\n",(0,a.jsx)(t.p,{children:"Adds a few arbitrary examples to the vector DB, just to make retrieval less trivial."})]})}function h(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},11151:(e,t,n)=>{n.d(t,{Z:()=>r,a:()=>s});var a=n(67294);const i={},o=a.createContext(i);function s(e){const t=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),a.createElement(o.Provider,{value:t},e.children)}}}]);